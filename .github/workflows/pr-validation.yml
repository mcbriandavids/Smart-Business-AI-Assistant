name: 📋 Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [master, dev, develop]

env:
  NODE_VERSION: "18.x"

jobs:
  # 📋 PR Info
  pr-info:
    name: 📋 Pull Request Information
    runs-on: ubuntu-latest

    steps:
      - name: 📋 Display PR Info
        run: |
          echo "📋 Pull Request Information"
          echo "=========================="
          echo "🔖 Title: ${{ github.event.pull_request.title }}"
          echo "👤 Author: ${{ github.event.pull_request.user.login }}"
          echo "🌿 Source: ${{ github.event.pull_request.head.ref }}"
          echo "🎯 Target: ${{ github.event.pull_request.base.ref }}"
          echo "📊 Files Changed: ${{ github.event.pull_request.changed_files }}"
          echo "➕ Additions: ${{ github.event.pull_request.additions }}"
          echo "➖ Deletions: ${{ github.event.pull_request.deletions }}"

  # 🔍 Code Quality Check
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd packages/backend && (npm ci || npm install)
          cd ../frontend && (npm ci || npm install)

      - name: 🔍 Check for Large Files
        run: |
          echo "🔍 Checking for large files..."
          find . -name "node_modules" -prune -o -type f -size +10M -print | head -10

      - name: 🔍 Check Package Vulnerabilities
        continue-on-error: true
        run: |
          echo "🔍 Checking for known vulnerabilities..."
          cd packages/backend && npm audit --audit-level=high || true
          cd ../frontend && npm audit --audit-level=high || true

  # 🧪 Quick Tests
  quick-tests:
    name: 🧪 Quick Validation Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd packages/backend && (npm ci || npm install)
          cd ../frontend && (npm ci || npm install)

      - name: 🔍 Backend Lint Check
        run: |
          cd packages/backend
          npm run lint || echo "⚠️ Linting issues found"

      - name: 🔍 Frontend Lint Check
        run: |
          cd packages/frontend
          npm run lint || echo "⚠️ Linting issues found"

      - name: 🔍 TypeScript Compilation Check
        run: |
          cd packages/backend
          npx tsc --noEmit || echo "⚠️ TypeScript compilation issues in backend"
          cd ../frontend
          npm run type-check || echo "⚠️ TypeScript compilation issues in frontend"

  # 🏗️ Build Verification
  build-check:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [quick-tests]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📋 Install Dependencies
        run: |
          cd packages/backend && (npm ci || npm install)
          cd ../frontend && (npm ci || npm install)

      - name: 🏗️ Test Backend Build
        run: |
          cd packages/backend
          npm run build

      - name: 🏗️ Test Frontend Build
        run: |
          cd packages/frontend
          npm run build

      - name: ✅ Build Success
        run: |
          echo "✅ All builds completed successfully!"
          echo "🎉 PR is ready for review"

  # 📊 PR Summary
  pr-summary:
    name: 📊 Pull Request Summary
    runs-on: ubuntu-latest
    needs: [pr-info, code-quality, quick-tests, build-check]
    if: always()

    steps:
      - name: 📊 Generate Summary
        run: |
          echo "📊 Pull Request Validation Summary"
          echo "================================="

          # Check results
          code_quality="${{ needs.code-quality.result }}"
          quick_tests="${{ needs.quick-tests.result }}"
          build_check="${{ needs.build-check.result }}"

          echo "🔍 Code Quality: $code_quality"
          echo "🧪 Quick Tests: $quick_tests"
          echo "🏗️ Build Check: $build_check"

          if [[ "$code_quality" == "success" && "$quick_tests" == "success" && "$build_check" == "success" ]]; then
            echo ""
            echo "✅ PR Validation PASSED"
            echo "🎉 Ready for review and merge!"
          else
            echo ""
            echo "❌ PR Validation FAILED"
            echo "🔍 Please fix the issues above before requesting review"
          fi
