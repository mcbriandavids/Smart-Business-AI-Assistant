name: Smart Business AI - Unified Pipeline

on:
  push:
    branches:
      - dev
      - main
      - master
      - "feature/**"
      - "bugfix/**"
      - "hotfix/**"
  pull_request:
    branches:
      - dev
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production

env:
  NODE_VERSION: "18.x"
  PROJECT_NAME: "Smart Business AI Assistant"

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.deployment-check.outputs.should-deploy }}
      target-env: ${{ steps.deployment-check.outputs.target-env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install all dependencies
        run: |
          npm install
          npm run install:all

      - name: Determine deployment strategy
        id: deployment-check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=dev" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "target-env=none" >> $GITHUB_OUTPUT
          fi

  # Stage 2: Code Quality and Testing
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - run: |
          npm install
          npm run install:all
      - run: npm run test:backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - run: |
          npm install
          npm run install:all
      - run: npm run test:frontend

  # Stage 3: Build Verification
  build-backend:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - run: |
          npm install
          npm run install:all
      - run: npm run build:backend
      - uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: packages/backend/dist/
          retention-days: 1

  build-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - run: |
          npm install
          npm run install:all
      - run: npm run build:frontend
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: packages/frontend/.next/
          retention-days: 1

  # Stage 4: Security and Code Quality
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - run: |
          npm install
          npm run install:all
      - run: npm audit --audit-level moderate || echo "Moderate vulnerabilities found"
      - run: npm audit --audit-level high || echo "High severity vulnerabilities found"

  # Stage 5: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs:
      [
        test-backend,
        test-frontend,
        build-backend,
        build-frontend,
        security-audit,
      ]
    if: always()
    outputs:
      passed: ${{ steps.evaluate.outputs.passed }}
    steps:
      - name: Evaluate Quality Gate
        id: evaluate
        run: |
          echo "=== Quality Gate Evaluation ==="
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Backend Build: ${{ needs.build-backend.result }}"
          echo "Frontend Build: ${{ needs.build-frontend.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [ "${{ needs.test-backend.result }}" = "success" ] &&
             [ "${{ needs.test-frontend.result }}" = "success" ] &&
             [ "${{ needs.build-backend.result }}" = "success" ] &&
             [ "${{ needs.build-frontend.result }}" = "success" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "Quality Gate PASSED - All critical checks successful"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "Quality Gate FAILED - Critical checks failed"
            exit 1
          fi

  # Stage 6: Deployment
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, quality-gate]
    if: |
      needs.quality-gate.outputs.passed == 'true' &&
      needs.setup.outputs.should-deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: "*-build"
          merge-multiple: true
      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ needs.setup.outputs.target-env }} environment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployment successful."

  # Stage 7: Auto-promotion (Dev to Main)
  promote-to-main:
    name: Promote to Main
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, deploy]
    if: |
      github.ref == 'refs/heads/dev' && 
      github.event_name == 'push' && 
      needs.quality-gate.outputs.passed == 'true' &&
      needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Promote dev to main
        run: |
          echo "Auto-promoting dev branch to main..."
          git checkout main || git checkout -b main
          git merge dev --no-ff -m "chore: Auto-promote dev to main after successful deployment [skip ci]"
          git push origin main
          echo "Successfully promoted dev to main"

  # Stage 8: Notifications
  notify-failure:
    name: Pipeline Failed
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure() || needs.quality-gate.outputs.passed == 'false'
    steps:
      - name: Log failure
        run: |
          echo "Pipeline failed for ${{ env.PROJECT_NAME }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

  notify-success:
    name: Pipeline Passed
    runs-on: ubuntu-latest
    needs: [quality-gate, setup]
    if: needs.quality-gate.outputs.passed == 'true'
    steps:
      - name: Log success
        run: |
          echo "Pipeline succeeded for ${{ env.PROJECT_NAME }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Target Environment: ${{ needs.setup.outputs.target-env }}"
          echo "Deployment: ${{ needs.setup.outputs.should-deploy }}"
