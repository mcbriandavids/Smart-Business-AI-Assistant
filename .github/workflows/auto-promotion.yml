name: Auto-Promotion Pipeline

permissions:
  contents: write # ‚úÖ allow pushing commits and tags

on:
  workflow_run:
    workflows: ["Deployment Pipeline"]
    types:
      - completed
    branches:
      - dev
  schedule:
    - cron: "0 2 * * *" # ‚úÖ Run daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      force-promotion:
        description: "Force promotion from dev to master"
        required: false
        default: false
        type: boolean
      source-branch:
        description: "Source branch for promotion"
        required: true
        default: "dev"
        type: string
      target-branch:
        description: "Target branch for promotion"
        required: true
        default: "master" # ‚úÖ ensure master not main
        type: string

env:
  NODE_VERSION: "18.x"
  PROJECT_NAME: "Smart Business AI Assistant"
  DEFAULT_BRANCH: master # ‚úÖ explicitly set default branch

jobs:
  # -------------------
  # Check Promotion Prerequisites
  # -------------------
  check-promotion-requirements:
    runs-on: ubuntu-latest
    outputs:
      should-promote: ${{ steps.promotion-check.outputs.should-promote }}
      source-branch: ${{ steps.promotion-check.outputs.source-branch }}
      target-branch: ${{ steps.promotion-check.outputs.target-branch }}
      promotion-reason: ${{ steps.promotion-check.outputs.promotion-reason }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: promotion-check
        run: |
          SOURCE_BRANCH="dev"
          TARGET_BRANCH="${{ env.DEFAULT_BRANCH }}"
          SHOULD_PROMOTE="false"
          PROMOTION_REASON=""

          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ] && [ "${{ github.event.workflow_run.head_branch }}" = "dev" ]; then
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Successful dev deployment"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force-promotion }}" = "true" ]; then
              SOURCE_BRANCH="${{ github.event.inputs.source-branch }}"
              TARGET_BRANCH="${{ github.event.inputs.target-branch }}"
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Manual force promotion"
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            git fetch origin dev:dev
            git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
            COMMITS_AHEAD=$(git rev-list --count $TARGET_BRANCH..dev)
            if [ "$COMMITS_AHEAD" -gt 0 ]; then
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Scheduled promotion - dev is $COMMITS_AHEAD commits ahead"
            fi
          fi

          echo "should-promote=$SHOULD_PROMOTE" >> $GITHUB_OUTPUT
          echo "source-branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "target-branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "promotion-reason=$PROMOTION_REASON" >> $GITHUB_OUTPUT

  # -------------------
  # Verify Source Branch Quality
  # -------------------
  verify-source-quality:
    runs-on: ubuntu-latest
    needs: check-promotion-requirements
    if: needs.check-promotion-requirements.outputs.should-promote == 'true'
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.quality-passed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-promotion-requirements.outputs.source-branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - run: npm ci

      - id: quality-check
        run: |
          echo "üîç Running comprehensive quality checks..."

          # Test backend
          echo "Testing backend..."
          if ! npm run test:ci --workspace=packages/backend; then
            echo "‚ùå Backend tests failed"
            exit 1
          fi

          # Test frontend
          echo "Testing frontend..."
          if ! npm run test:ci --workspace=packages/frontend; then
            echo "‚ùå Frontend tests failed"
            exit 1
          fi

          # Build backend
          echo "Building backend..."
          if ! npm run build --workspace=packages/backend; then
            echo "‚ùå Backend build failed"
            exit 1
          fi

          # Build frontend
          echo "Building frontend..."
          if ! npm run build --workspace=packages/frontend; then
            echo "‚ùå Frontend build failed"
            exit 1
          fi

          # Security audit
          echo "Running security audit..."
          if ! npm audit --audit-level=high; then
            echo "‚ùå Security audit failed - high severity vulnerabilities found"
            exit 1
          fi

          echo "‚úÖ All quality checks passed"
          echo "quality-passed=true" >> $GITHUB_OUTPUT

  # -------------------
  # Execute Promotion & Semantic Tagging
  # -------------------
  execute-promotion:
    runs-on: ubuntu-latest
    needs: [check-promotion-requirements, verify-source-quality]
    if: |
      needs.check-promotion-requirements.outputs.should-promote == 'true' &&
      needs.verify-source-quality.outputs.quality-passed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Execute promotion (without tagging)
        run: |
          SOURCE_BRANCH="${{ needs.check-promotion-requirements.outputs.source-branch }}"
          TARGET_BRANCH="${{ needs.check-promotion-requirements.outputs.target-branch }}"

          git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
          git checkout $TARGET_BRANCH

          cat <<EOF > commit_message.txt
          üöÄ Auto-promotion: Merge $SOURCE_BRANCH to $TARGET_BRANCH

          Reason: ${{ needs.check-promotion-requirements.outputs.promotion-reason }}
          Source SHA: $(git rev-parse $SOURCE_BRANCH)
          Target SHA: $(git rev-parse $TARGET_BRANCH)
          Promoted by: github-actions[bot]
          Timestamp: $(date -u)
          EOF

          git merge $SOURCE_BRANCH --no-ff -F commit_message.txt
          git push origin $TARGET_BRANCH
          echo "‚úÖ Promotion completed successfully"

      - name: Note about tagging
        run: |
          echo "‚ÑπÔ∏è Automatic tagging will be handled by the Auto-Tag Release workflow"
          echo "   This prevents duplicate tagging and maintains separation of concerns"

  # -------------------
  # Post-Promotion Verification
  # -------------------
  post-promotion-verification:
    runs-on: ubuntu-latest
    needs: [check-promotion-requirements, execute-promotion]
    if: needs.execute-promotion.result == 'success'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-promotion-requirements.outputs.target-branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          SOURCE_BRANCH="${{ needs.check-promotion-requirements.outputs.source-branch }}"
          TARGET_BRANCH="${{ needs.check-promotion-requirements.outputs.target-branch }}"
          git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
          if git merge-base --is-ancestor $SOURCE_BRANCH $TARGET_BRANCH; then
            echo "‚úÖ Verified promotion success"
          else
            echo "‚ùå Promotion verification failed"
            exit 1
          fi

  # -------------------
  # Notifications
  # -------------------
  notify-promotion:
    runs-on: ubuntu-latest
    needs:
      [
        check-promotion-requirements,
        execute-promotion,
        post-promotion-verification,
      ]
    if: always() && needs.check-promotion-requirements.outputs.should-promote == 'true'
    steps:
      - run: |
          SOURCE="${{ needs.check-promotion-requirements.outputs.source-branch }}"
          TARGET="${{ needs.check-promotion-requirements.outputs.target-branch }}"
          REASON="${{ needs.check-promotion-requirements.outputs.promotion-reason }}"
          if [ "${{ needs.execute-promotion.result }}" = "success" ] && [ "${{ needs.post-promotion-verification.result }}" = "success" ]; then
            echo "‚úÖ PROMOTION SUCCESSFUL: $SOURCE ‚Üí $TARGET"
          elif [ "${{ needs.execute-promotion.result }}" = "failure" ]; then
            echo "‚ùå PROMOTION FAILED"
          elif [ "${{ needs.post-promotion-verification.result }}" = "failure" ]; then
            echo "‚ö†Ô∏è VERIFICATION FAILED"
          else
            echo "‚ùå PROMOTION ABORTED"
          fi
          echo "Reason: $REASON"
          echo "Timestamp: $(date -u)"
