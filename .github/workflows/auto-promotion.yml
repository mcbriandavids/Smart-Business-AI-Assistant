name: Auto-Promotion Pipeline

permissions:
  contents: write # ‚úÖ allow creating PRs

on:
  workflow_run:
    workflows: ["Deployment Pipeline"]
    types:
      - completed
    branches:
      - dev
  schedule:
    - cron: "0 2 * * *" # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      force-promotion:
        description: "Force promotion from dev to master"
        required: false
        default: false
        type: boolean
      source-branch:
        description: "Source branch for promotion"
        required: true
        default: "dev"
        type: string
      target-branch:
        description: "Target branch for promotion"
        required: true
        default: "master"
        type: string

env:
  NODE_VERSION: "18.x"
  PROJECT_NAME: "Smart Business AI Assistant"

jobs:
  check-promotion-requirements:
    runs-on: ubuntu-latest
    outputs:
      should-promote: ${{ steps.promotion-check.outputs.should-promote }}
      source-branch: ${{ steps.promotion-check.outputs.source-branch }}
      target-branch: ${{ steps.promotion-check.outputs.target-branch }}
      promotion-reason: ${{ steps.promotion-check.outputs.promotion-reason }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: promotion-check
        run: |
          SOURCE_BRANCH="dev"
          TARGET_BRANCH="master"
          SHOULD_PROMOTE="false"
          PROMOTION_REASON=""

          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ] && [ "${{ github.event.workflow_run.head_branch }}" = "dev" ]; then
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Successful dev deployment"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force-promotion }}" = "true" ]; then
              SOURCE_BRANCH="${{ github.event.inputs.source-branch }}"
              TARGET_BRANCH="${{ github.event.inputs.target-branch }}"
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Manual force promotion"
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            git fetch origin dev:dev
            git fetch origin master:master
            COMMITS_AHEAD=$(git rev-list --count master..dev)
            if [ "$COMMITS_AHEAD" -gt 0 ]; then
              SHOULD_PROMOTE="true"
              PROMOTION_REASON="Scheduled promotion - dev is $COMMITS_AHEAD commits ahead"
            fi
          fi

          echo "should-promote=$SHOULD_PROMOTE" >> $GITHUB_OUTPUT
          echo "source-branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "target-branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "promotion-reason=$PROMOTION_REASON" >> $GITHUB_OUTPUT

  verify-source-quality:
    runs-on: ubuntu-latest
    needs: [check-promotion-requirements]
    if: needs.check-promotion-requirements.outputs.should-promote == 'true'
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.quality-passed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-promotion-requirements.outputs.source-branch }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - run: npm ci

      - id: quality-check
        run: |
          npm run test:ci --workspace=packages/backend || exit 1
          npm run test:ci --workspace=packages/frontend || exit 1
          npm run build --workspace=packages/backend || exit 1
          npm run build --workspace=packages/frontend || exit 1
          npm audit --audit-level=high || exit 1
          echo "quality-passed=true" >> $GITHUB_OUTPUT

  create-promotion-pr:
    name: Create Promotion PR
    runs-on: ubuntu-latest
    needs: [check-promotion-requirements, verify-source-quality]
    if: |
      needs.check-promotion-requirements.outputs.should-promote == 'true' &&
      needs.verify-source-quality.outputs.quality-passed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            üöÄ Auto-promotion: Merge ${{ needs.check-promotion-requirements.outputs.source-branch }} ‚Üí ${{ needs.check-promotion-requirements.outputs.target-branch }}
            Reason: ${{ needs.check-promotion-requirements.outputs.promotion-reason }}
          branch: "auto-promotion/${{ needs.check-promotion-requirements.outputs.source-branch }}-to-${{ needs.check-promotion-requirements.outputs.target-branch }}"
          title: "üöÄ Auto-promotion: ${{ needs.check-promotion-requirements.outputs.source-branch }} ‚Üí ${{ needs.check-promotion-requirements.outputs.target-branch }}"
          body: |
            Automated promotion triggered by: ${{ needs.check-promotion-requirements.outputs.promotion-reason }}

            Source branch: **${{ needs.check-promotion-requirements.outputs.source-branch }}**
            Target branch: **${{ needs.check-promotion-requirements.outputs.target-branch }}**
            Timestamp: $(date -u)
          base: ${{ needs.check-promotion-requirements.outputs.target-branch }}

  notify-promotion:
    runs-on: ubuntu-latest
    needs: [check-promotion-requirements, create-promotion-pr]
    if: always() && needs.check-promotion-requirements.outputs.should-promote == 'true'
    steps:
      - run: |
          SOURCE="${{ needs.check-promotion-requirements.outputs.source-branch }}"
          TARGET="${{ needs.check-promotion-requirements.outputs.target-branch }}"
          REASON="${{ needs.check-promotion-requirements.outputs.promotion-reason }}"

          if [ "${{ needs.create-promotion-pr.result }}" = "success" ]; then
            echo "‚úÖ PROMOTION PR CREATED: $SOURCE ‚Üí $TARGET"
          else
            echo "‚ùå PROMOTION FAILED: Could not create PR"
          fi
          echo "Reason: $REASON"
          echo "Timestamp: $(date -u)"
