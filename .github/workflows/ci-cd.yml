name: Smart Business AI - CI/CD Pipeline

on:
  push:
    branches: [dev, "feature/**", "bugfix/**", "hotfix/**"]
  pull_request:
    branches: [dev]

env:
  NODE_VERSION: "18.x"
  PROJECT_NAME: "Smart Business AI Assistant"

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npm run test:backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:frontend

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:backend

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:frontend

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for high severity vulnerabilities
        run: npm audit --audit-level high

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-backend, build-frontend, security]
    if: always()
    steps:
      - name: Evaluate Quality Gate
        run: |
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Backend Build: ${{ needs.build-backend.result }}"
          echo "Frontend Build: ${{ needs.build-frontend.result }}"
          echo "Security Audit: ${{ needs.security.result }}"

          if [ "${{ needs.test-backend.result }}" = "success" ] &&
             [ "${{ needs.test-frontend.result }}" = "success" ] &&
             [ "${{ needs.build-backend.result }}" = "success" ] &&
             [ "${{ needs.build-frontend.result }}" = "success" ] &&
             [ "${{ needs.security.result }}" = "success" ]; then
            echo "Quality Gate PASSED"
          else
            echo "Quality Gate FAILED"
            exit 1
          fi

  promote-to-main:
    name: Promote to Main
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push' && needs.quality-gate.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Promote dev to main
        run: |
          git checkout main
          git merge dev --no-ff -m "Auto-promote: Merge dev to main [skip ci]"
          git push origin main

  notify-failure:
    name: Pipeline Failed
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure()
    steps:
      - name: Log Failure
        run: |
          echo "CI/CD pipeline for ${{ env.PROJECT_NAME }} FAILED"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Check logs above for details."

  notify-success:
    name: Pipeline Passed
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: needs.quality-gate.result == 'success'
    steps:
      - name: Log Success
        run: |
          echo "CI/CD pipeline for ${{ env.PROJECT_NAME }} PASSED"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Ready for deployment!"
