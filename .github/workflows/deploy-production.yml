name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      component:
        description: "Component to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - backend
          - admin-dashboard
          - user-dashboard
          - frontend
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: "18.x"

jobs:
  deploy-backend-prod:
    name: Deploy Backend to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'backend' || github.event_name == 'release'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://api.yourdomain.com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Backend
        run: npm run build --workspace=packages/backend

      - name: Run Database Migrations
        run: |
          echo "Running database migrations..."
          npm run migration:run --workspace=packages/backend

      - name: Deploy Backend
        run: |
          echo "ðŸš€ Deploying backend to production..."
          echo "Backend API: https://api.yourdomain.com"
          # TODO: Add your backend deployment commands below.
          # Example for SSH + rsync deployment:
          # rsync -avz --delete ./packages/backend/ user@your-server:/var/www/backend/
          # ssh user@your-server 'cd /var/www/backend && pm2 restart backend'
          #
          # Or, if deploying to a cloud provider, use their CLI here.
          #
          # See documentation: https://github.com/your-org/your-repo/wiki/Production-Deployment

      - name: Health Check
        run: |
          echo "Performing health check..."
          # curl -f https://api.yourdomain.com/health || exit 1

  deploy-admin-prod:
    name: Deploy Admin Dashboard to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'admin-dashboard' || github.event_name == 'release'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://admin.yourdomain.com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Admin Dashboard
        run: npm run build --workspace=packages/admin-dashboard
        env:
          NEXT_PUBLIC_ENV: ${{ github.event.inputs.environment || 'production' }}

      - name: Deploy Admin Dashboard
        run: |
          echo "ðŸš€ Deploying admin dashboard to production..."
          echo "Admin Dashboard: https://admin.yourdomain.com"
          # TODO: Replace the following line with your actual deployment commands.
          # For example, use rsync, scp, or a CLI for your hosting provider to upload the build output:
          # rsync -avz packages/admin-dashboard/.next/ user@your-server:/var/www/admin-dashboard/
          # Or use Vercel/Netlify CLI if deploying to those platforms.

      - name: Verify Deployment
        run: |
          echo "Verifying admin dashboard deployment..."
          # Add verification steps

  deploy-user-prod:
    name: Deploy User Dashboard to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'user-dashboard' || github.event_name == 'release'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://app.yourdomain.com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build User Dashboard
        run: npm run build --workspace=packages/user-dashboard
        env:
          NEXT_PUBLIC_ENV: ${{ github.event.inputs.environment || 'production' }}

      - name: Deploy User Dashboard
        run: |
          echo "ðŸš€ Deploying user dashboard to production..."
          echo "User Dashboard: https://app.yourdomain.com"
          # TODO: Add your user dashboard deployment commands below.
          # Example for SSH + rsync deployment:
          # rsync -avz --delete ./packages/user-dashboard/.next/ user@your-server:/var/www/user-dashboard/.next/
          # ssh user@your-server 'cd /var/www/user-dashboard && pm2 restart user-dashboard'
          #
          # Or, if deploying to a cloud provider, use their CLI here.
          #
          # See documentation: https://github.com/your-org/your-repo/wiki/Production-Deployment

      - name: Verify Deployment
        run: |
          echo "Verifying user dashboard deployment..."
          # Add verification steps

  deploy-frontend-prod:
    name: Deploy Frontend to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    if: github.event.inputs.component == 'all' || github.event.inputs.component == 'frontend' || github.event_name == 'release'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://yourdomain.com
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build Frontend
        run: npm run build --workspace=packages/frontend
        env:
          NEXT_PUBLIC_ENV: ${{ github.event.inputs.environment || 'production' }}

      - name: Deploy Frontend
        run: |
          echo "ðŸš€ Deploying frontend to production..."
          echo "Frontend: https://yourdomain.com"
          # TODO: Add your frontend deployment commands below.
          # Example for SSH + rsync deployment:
          # rsync -avz --delete ./packages/frontend/.next/ user@your-server:/var/www/frontend/.next/
          # ssh user@your-server 'cd /var/www/frontend && pm2 restart frontend'
          #
          # Or, if deploying to a cloud provider, use their CLI here.

      - name: Verify Deployment
        run: |
          echo "Verifying frontend deployment..."
          # Add verification steps

  rollback:
    name: Rollback if Needed
    runs-on: ubuntu-latest
    needs:
      [
        deploy-backend-prod,
        deploy-admin-prod,
        deploy-user-prod,
        deploy-frontend-prod,
      ]
    if: failure()
    steps:
      - name: Rollback Deployment
        run: |
          echo "ðŸ”„ Rolling back failed deployment..."
          echo "Component failures detected, initiating rollback procedures"
          # Add rollback commands here

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs:
      [
        deploy-backend-prod,
        deploy-admin-prod,
        deploy-user-prod,
        deploy-frontend-prod,
      ]
    if: success()
    steps:
      - name: Clear Cache
        run: |
          echo "ðŸ§¹ Clearing application caches..."
          # Add cache clearing commands

      - name: Warm Up Applications
        run: |
          echo "ðŸ”¥ Warming up applications..."
          # curl https://api.yourdomain.com/health
          # curl https://admin.yourdomain.com
          # curl https://app.yourdomain.com

      - name: Send Success Notification
        run: |
          echo "âœ… Production deployment completed successfully!"
          echo "Backend: https://api.yourdomain.com"
          echo "Admin: https://admin.yourdomain.com"
          echo "App: https://app.yourdomain.com"
          echo "Frontend: https://yourdomain.com"
