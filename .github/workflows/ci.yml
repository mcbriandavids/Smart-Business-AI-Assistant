name: CI Pipeline

on:
  push:
    branches:
      - dev
      - main
      - master
      - "feature/**"
      - "bugfix/**"
      - "hotfix/**"
  pull_request:
    branches:
      - dev
      - main
      - master

env:
  NODE_VERSION: "18.x"
  PROJECT_NAME: "Smart Business AI Assistant"

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache root deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-root-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-root-

      - name: Install root dependencies
        run: npm install

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=npm-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

  # Stage 2: Testing
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Backend deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-backend-${{ hashFiles('packages/backend/package-lock.json') }}
          restore-keys: npm-backend-
      - run: npm install --workspace=@smart-business-ai/backend
      - run: npm run test --workspace=@smart-business-ai/backend
        env:
          CI: true
          NODE_ENV: test

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Frontend deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-frontend-${{ hashFiles('packages/frontend/package-lock.json') }}
          restore-keys: npm-frontend-
      - run: npm install --workspace=@smart-business-ai/frontend
      - run: npm run test --workspace=@smart-business-ai/frontend
        env:
          CI: true
          NODE_ENV: test

  # Stage 3: Building
  build-backend:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Backend deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-backend-${{ hashFiles('packages/backend/package-lock.json') }}
          restore-keys: npm-backend-
      - run: npm install --workspace=@smart-business-ai/backend
      - run: npm run build --workspace=@smart-business-ai/backend
      - uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: packages/backend/dist/
          retention-days: 1

  build-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: test-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Frontend deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-frontend-${{ hashFiles('packages/frontend/package-lock.json') }}
          restore-keys: npm-frontend-
      - run: npm install --workspace=@smart-business-ai/frontend
      - run: npm run build --workspace=@smart-business-ai/frontend
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: packages/frontend/.next/
          retention-days: 1

  # Stage 4: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Root deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-root-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-root-
      - run: npm install
      - run: npm audit --audit-level=moderate || echo "Moderate vulnerabilities found"
      - run: npm audit --audit-level=high || echo "High severity vulnerabilities found"

  # Stage 5: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs:
      [
        test-backend,
        test-frontend,
        build-backend,
        build-frontend,
        security-audit,
      ]
    if: always()
    outputs:
      passed: ${{ steps.evaluate.outputs.passed }}
    steps:
      - name: Evaluate Quality Gate
        id: evaluate
        run: |
          echo "=== Quality Gate Evaluation ==="
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Backend Build: ${{ needs.build-backend.result }}"
          echo "Frontend Build: ${{ needs.build-frontend.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [ "${{ needs.test-backend.result }}" = "success" ] && \
             [ "${{ needs.test-frontend.result }}" = "success" ] && \
             [ "${{ needs.build-backend.result }}" = "success" ] && \
             [ "${{ needs.build-frontend.result }}" = "success" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "Quality Gate PASSED - All critical checks successful"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "Quality Gate FAILED - Critical checks failed"
            exit 1
          fi

  # Notifications
  notify-ci-status:
    name: CI Status Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Notify CI Status
        run: |
          if [ "${{ needs.quality-gate.outputs.passed }}" = "true" ]; then
            echo "✅ CI Pipeline PASSED for ${{ env.PROJECT_NAME }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "All tests and builds successful"
          else
            echo "❌ CI Pipeline FAILED for ${{ env.PROJECT_NAME }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Check failed jobs above"
          fi
